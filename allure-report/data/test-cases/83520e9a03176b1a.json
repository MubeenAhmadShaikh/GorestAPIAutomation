{"uid":"83520e9a03176b1a","name":"test_create_new_post_positive[get_create_post_data0]","fullName":"tests.test_posts.TestPosts#test_create_new_post_positive","historyId":"3b4a222c86e31039353540314c249078","time":{"start":1700273900706,"stop":1700273906296,"duration":5590},"status":"failed","statusMessage":"AssertionError: Response time exceeded: 2.6","statusTrace":"self = <tests.test_posts.TestPosts object at 0x0000021B6A0D0230>\nget_create_post_data = {'body': 'This is the sample description for the post', 'title': 'Sample post 1'}\n\n    @pytest.mark.positive\n    def test_create_new_post_positive(self, get_create_post_data):\n        logs = self.get_logger()\n        random_user_response = self.get_a_random_user()\n        post_data = {\n            \"user_id\": random_user_response['id'],\n            \"title\": get_create_post_data['title'],\n            \"body\": get_create_post_data['body'],\n        }\n        expected_schema = schemas.single_post_schema()\n        response = TestPosts.se.post(base_url + urls.common_post_url(), data=post_data)\n        try:\n            common_validations.validate_status_code(response, 201)\n            logs.info(\"created new post successfully: status 201\")\n            data = response.json()\n            common_validations.validate_content_type(response)\n            common_validations.validate_auth_token(response, access_token)\n            common_validations.validate_response_is_a_dictionary(data)\n            common_validations.validate_response_time(response, 2.0)\n            logs.info(\"response time taken: \" + str(round(response.elapsed.total_seconds(), 1)))\n            common_validations.validate_single_object_schema(data, expected_schema)\n            posts_validations.validate_post_response_body(post_data, data)\n            logs.info(\"validated post data successfully\")\n        except AssertionError as ae:\n            logs.error(f\"Test Failed: {ae}\")\n>           raise ae\n\ntest_posts.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_posts.py:41: in test_create_new_post_positive\n    common_validations.validate_response_time(response, 2.0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [201]>, expected_time = 2.0\n\n    def validate_response_time(response, expected_time):\n>       assert response.elapsed.total_seconds() <= expected_time, \"Response time exceeded: \" + str(\n            round(response.elapsed.total_seconds(), 1))\nE       AssertionError: Response time exceeded: 2.6\n\n..\\utilities\\validations\\common_validations.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_create_post_data","time":{"start":1700273900705,"stop":1700273900706,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Response time exceeded: 2.6","statusTrace":"self = <tests.test_posts.TestPosts object at 0x0000021B6A0D0230>\nget_create_post_data = {'body': 'This is the sample description for the post', 'title': 'Sample post 1'}\n\n    @pytest.mark.positive\n    def test_create_new_post_positive(self, get_create_post_data):\n        logs = self.get_logger()\n        random_user_response = self.get_a_random_user()\n        post_data = {\n            \"user_id\": random_user_response['id'],\n            \"title\": get_create_post_data['title'],\n            \"body\": get_create_post_data['body'],\n        }\n        expected_schema = schemas.single_post_schema()\n        response = TestPosts.se.post(base_url + urls.common_post_url(), data=post_data)\n        try:\n            common_validations.validate_status_code(response, 201)\n            logs.info(\"created new post successfully: status 201\")\n            data = response.json()\n            common_validations.validate_content_type(response)\n            common_validations.validate_auth_token(response, access_token)\n            common_validations.validate_response_is_a_dictionary(data)\n            common_validations.validate_response_time(response, 2.0)\n            logs.info(\"response time taken: \" + str(round(response.elapsed.total_seconds(), 1)))\n            common_validations.validate_single_object_schema(data, expected_schema)\n            posts_validations.validate_post_response_body(post_data, data)\n            logs.info(\"validated post data successfully\")\n        except AssertionError as ae:\n            logs.error(f\"Test Failed: {ae}\")\n>           raise ae\n\ntest_posts.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_posts.py:41: in test_create_new_post_positive\n    common_validations.validate_response_time(response, 2.0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [201]>, expected_time = 2.0\n\n    def validate_response_time(response, expected_time):\n>       assert response.elapsed.total_seconds() <= expected_time, \"Response time exceeded: \" + str(\n            round(response.elapsed.total_seconds(), 1))\nE       AssertionError: Response time exceeded: 2.6\n\n..\\utilities\\validations\\common_validations.py:31: AssertionError","steps":[],"attachments":[{"uid":"c5b26a3d60906d5a","name":"log","source":"c5b26a3d60906d5a.txt","type":"text/plain","size":216}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_posts"},{"name":"subSuite","value":"TestPosts"},{"name":"host","value":"DESKTOP-FFIUPF0"},{"name":"thread","value":"14704-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_posts"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"get_create_post_data","value":"{'title': 'Sample post 1', 'body': 'This is the sample description for the post'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["positive"]},"source":"83520e9a03176b1a.json","parameterValues":["{'title': 'Sample post 1', 'body': 'This is the sample description for the post'}"]}