{"uid":"6090895cb14ec3a6","name":"test_search_post_by_title_positive","fullName":"tests.test_posts.TestPosts#test_search_post_by_title_positive","historyId":"52addaafea8b5bcda947eef53e8cd088","time":{"start":1700273935001,"stop":1700273939527,"duration":4526},"status":"failed","statusMessage":"AssertionError: Response time exceeded: 1.1","statusTrace":"self = <tests.test_posts.TestPosts object at 0x0000021B6B2FE240>\n\n    @pytest.mark.positive\n    def test_search_post_by_title_positive(self):\n        logs = self.get_logger()\n        expected_schema = schemas.single_post_schema()\n        random_post_response = self.get_a_random_post()\n        post_title = random_post_response['title'][0:5].lower()\n        response = TestPosts.se.get(base_url + urls.search_post_by_title_url(post_title))\n        try:\n            common_validations.validate_status_code(response, 200)\n            data = response.json()\n            logs.info(f\"searched post by title {post_title} successfully: status 200\")\n            posts_validations.validate_searched_post_by_title(data, post_title)\n            logs.info(\"validated searched post successfully\")\n            common_validations.validate_content_type(response)\n            common_validations.validate_auth_token(response, access_token)\n            common_validations.validate_response_is_a_list(data)\n            common_validations.validate_response_time(response, 1.0)\n            common_validations.validate_multiple_object_schema(data, expected_schema)\n        except AssertionError as ae:\n            logs.error(f\"Test Failed: {ae}\")\n>           raise ae\n\ntest_posts.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_posts.py:106: in test_search_post_by_title_positive\n    common_validations.validate_response_time(response, 1.0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_time = 1.0\n\n    def validate_response_time(response, expected_time):\n>       assert response.elapsed.total_seconds() <= expected_time, \"Response time exceeded: \" + str(\n            round(response.elapsed.total_seconds(), 1))\nE       AssertionError: Response time exceeded: 1.1\n\n..\\utilities\\validations\\common_validations.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Response time exceeded: 1.1","statusTrace":"self = <tests.test_posts.TestPosts object at 0x0000021B6B2FE240>\n\n    @pytest.mark.positive\n    def test_search_post_by_title_positive(self):\n        logs = self.get_logger()\n        expected_schema = schemas.single_post_schema()\n        random_post_response = self.get_a_random_post()\n        post_title = random_post_response['title'][0:5].lower()\n        response = TestPosts.se.get(base_url + urls.search_post_by_title_url(post_title))\n        try:\n            common_validations.validate_status_code(response, 200)\n            data = response.json()\n            logs.info(f\"searched post by title {post_title} successfully: status 200\")\n            posts_validations.validate_searched_post_by_title(data, post_title)\n            logs.info(\"validated searched post successfully\")\n            common_validations.validate_content_type(response)\n            common_validations.validate_auth_token(response, access_token)\n            common_validations.validate_response_is_a_list(data)\n            common_validations.validate_response_time(response, 1.0)\n            common_validations.validate_multiple_object_schema(data, expected_schema)\n        except AssertionError as ae:\n            logs.error(f\"Test Failed: {ae}\")\n>           raise ae\n\ntest_posts.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_posts.py:106: in test_search_post_by_title_positive\n    common_validations.validate_response_time(response, 1.0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_time = 1.0\n\n    def validate_response_time(response, expected_time):\n>       assert response.elapsed.total_seconds() <= expected_time, \"Response time exceeded: \" + str(\n            round(response.elapsed.total_seconds(), 1))\nE       AssertionError: Response time exceeded: 1.1\n\n..\\utilities\\validations\\common_validations.py:31: AssertionError","steps":[],"attachments":[{"uid":"7011ad5c4d6cbf58","name":"log","source":"7011ad5c4d6cbf58.txt","type":"text/plain","size":348}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_posts"},{"name":"subSuite","value":"TestPosts"},{"name":"host","value":"DESKTOP-FFIUPF0"},{"name":"thread","value":"14704-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_posts"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["positive"]},"source":"6090895cb14ec3a6.json","parameterValues":[]}