{"uid":"369600771ab9d3ae","name":"test_pagination_positive","fullName":"tests.test_posts.TestPosts#test_pagination_positive","historyId":"ea4dd295e636acb9c45e6b1e38c9d9b4","time":{"start":1700273945197,"stop":1700273946283,"duration":1086},"status":"failed","statusMessage":"AssertionError: Response time exceeded: 1.1","statusTrace":"self = <tests.test_posts.TestPosts object at 0x0000021B6B30C5C0>\n\n    @pytest.mark.positive\n    def test_pagination_positive(self):\n        logs = self.get_logger()\n        expected_schema = schemas.single_post_schema()\n        page = 3\n        per_page = 20\n        response = TestPosts.se.get(base_url + urls.search_post_with_pagination_url(page, per_page))\n        try:\n            common_validations.validate_status_code(response, 200)\n            data = response.json()\n            logs.info(f\"searched using pagination parameters page {page} and per page {per_page}\"\n                      f\" successfully: status 200\")\n            users_validations.validate_perpage_objects_length(data, per_page)\n            logs.info(\"validated page and its returned items length.\")\n            common_validations.validate_content_type(response)\n            common_validations.validate_auth_token(response, access_token)\n            common_validations.validate_response_is_a_list(data)\n            common_validations.validate_response_time(response, 1.0)\n            common_validations.validate_multiple_object_schema(data, expected_schema)\n        except AssertionError as ae:\n            logs.error(f\"Test Failed: {ae}\")\n>           raise ae\n\ntest_posts.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_posts.py:173: in test_pagination_positive\n    common_validations.validate_response_time(response, 1.0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_time = 1.0\n\n    def validate_response_time(response, expected_time):\n>       assert response.elapsed.total_seconds() <= expected_time, \"Response time exceeded: \" + str(\n            round(response.elapsed.total_seconds(), 1))\nE       AssertionError: Response time exceeded: 1.1\n\n..\\utilities\\validations\\common_validations.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: Response time exceeded: 1.1","statusTrace":"self = <tests.test_posts.TestPosts object at 0x0000021B6B30C5C0>\n\n    @pytest.mark.positive\n    def test_pagination_positive(self):\n        logs = self.get_logger()\n        expected_schema = schemas.single_post_schema()\n        page = 3\n        per_page = 20\n        response = TestPosts.se.get(base_url + urls.search_post_with_pagination_url(page, per_page))\n        try:\n            common_validations.validate_status_code(response, 200)\n            data = response.json()\n            logs.info(f\"searched using pagination parameters page {page} and per page {per_page}\"\n                      f\" successfully: status 200\")\n            users_validations.validate_perpage_objects_length(data, per_page)\n            logs.info(\"validated page and its returned items length.\")\n            common_validations.validate_content_type(response)\n            common_validations.validate_auth_token(response, access_token)\n            common_validations.validate_response_is_a_list(data)\n            common_validations.validate_response_time(response, 1.0)\n            common_validations.validate_multiple_object_schema(data, expected_schema)\n        except AssertionError as ae:\n            logs.error(f\"Test Failed: {ae}\")\n>           raise ae\n\ntest_posts.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_posts.py:173: in test_pagination_positive\n    common_validations.validate_response_time(response, 1.0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_time = 1.0\n\n    def validate_response_time(response, expected_time):\n>       assert response.elapsed.total_seconds() <= expected_time, \"Response time exceeded: \" + str(\n            round(response.elapsed.total_seconds(), 1))\nE       AssertionError: Response time exceeded: 1.1\n\n..\\utilities\\validations\\common_validations.py:31: AssertionError","steps":[],"attachments":[{"uid":"cd3fe7b2b65c239c","name":"log","source":"cd3fe7b2b65c239c.txt","type":"text/plain","size":358}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_posts"},{"name":"subSuite","value":"TestPosts"},{"name":"host","value":"DESKTOP-FFIUPF0"},{"name":"thread","value":"14704-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_posts"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["positive"]},"source":"369600771ab9d3ae.json","parameterValues":[]}