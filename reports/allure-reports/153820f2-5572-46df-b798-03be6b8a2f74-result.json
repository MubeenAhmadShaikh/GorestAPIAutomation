{"name": "test_create_new_post_positive[get_create_post_data0]", "status": "failed", "statusDetails": {"message": "AssertionError: Response time exceeded: 2.6", "trace": "self = <tests.test_posts.TestPosts object at 0x0000021B6A0D0230>\nget_create_post_data = {'body': 'This is the sample description for the post', 'title': 'Sample post 1'}\n\n    @pytest.mark.positive\n    def test_create_new_post_positive(self, get_create_post_data):\n        logs = self.get_logger()\n        random_user_response = self.get_a_random_user()\n        post_data = {\n            \"user_id\": random_user_response['id'],\n            \"title\": get_create_post_data['title'],\n            \"body\": get_create_post_data['body'],\n        }\n        expected_schema = schemas.single_post_schema()\n        response = TestPosts.se.post(base_url + urls.common_post_url(), data=post_data)\n        try:\n            common_validations.validate_status_code(response, 201)\n            logs.info(\"created new post successfully: status 201\")\n            data = response.json()\n            common_validations.validate_content_type(response)\n            common_validations.validate_auth_token(response, access_token)\n            common_validations.validate_response_is_a_dictionary(data)\n            common_validations.validate_response_time(response, 2.0)\n            logs.info(\"response time taken: \" + str(round(response.elapsed.total_seconds(), 1)))\n            common_validations.validate_single_object_schema(data, expected_schema)\n            posts_validations.validate_post_response_body(post_data, data)\n            logs.info(\"validated post data successfully\")\n        except AssertionError as ae:\n            logs.error(f\"Test Failed: {ae}\")\n>           raise ae\n\ntest_posts.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_posts.py:41: in test_create_new_post_positive\n    common_validations.validate_response_time(response, 2.0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [201]>, expected_time = 2.0\n\n    def validate_response_time(response, expected_time):\n>       assert response.elapsed.total_seconds() <= expected_time, \"Response time exceeded: \" + str(\n            round(response.elapsed.total_seconds(), 1))\nE       AssertionError: Response time exceeded: 2.6\n\n..\\utilities\\validations\\common_validations.py:31: AssertionError"}, "attachments": [{"name": "log", "source": "11a69d8e-1de2-4262-8453-9b7c5a86252a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_create_post_data", "value": "{'title': 'Sample post 1', 'body': 'This is the sample description for the post'}"}], "start": 1700273900706, "stop": 1700273906296, "uuid": "66bc5fb9-6417-4462-a3fa-372dc1c377b8", "historyId": "3b4a222c86e31039353540314c249078", "testCaseId": "eda759a30ae1cc650d223ef9f416c3d2", "fullName": "tests.test_posts.TestPosts#test_create_new_post_positive", "labels": [{"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_posts"}, {"name": "subSuite", "value": "TestPosts"}, {"name": "host", "value": "DESKTOP-FFIUPF0"}, {"name": "thread", "value": "14704-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_posts"}]}