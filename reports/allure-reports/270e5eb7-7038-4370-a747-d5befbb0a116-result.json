{"name": "test_pagination_negative[%$#@!]", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nAssertionError: [intentionally failed]No error message returned for invalid page: %$#@! with type as <class 'str'>", "trace": "self = <tests.test_posts.TestPosts object at 0x0000021B6B5A0380>, invalid_data = '%$#@!'\n\n    @pytest.mark.negative\n    @pytest.mark.xfail\n    @pytest.mark.parametrize('invalid_data', [-123, \"%$#@!\", \" \"])\n    @retry(stop_max_attempt_number=3, retry_on_result=lambda result: result == 429)\n    def test_pagination_negative(self, invalid_data):\n        logs = self.get_logger()\n        page = invalid_data\n        per_page = invalid_data\n        response = TestPosts.se.get(base_url + urls.search_post_with_pagination_url(page, per_page))\n        logs.info(f\"Page provided: {page} per_page: {per_page}\")\n        try:\n            common_validations.validate_status_code(response, 200)\n            users_validations.validate_invalid_pagination(page, per_page)\n            logs.info(\"Expected status code and messages are returned for searching invalid pagination parameters\")\n        except AssertionError as ae:\n            if response.status_code == 429:\n                logs.warning(\"Retrying due to status code 429 Too many requests\")\n                return 429  # This triggers a retry for status code 429\n            logs.error(f\"Test Failed:  {ae}\")\n>           raise ae\n\ntest_posts.py:315: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_posts.py:308: in test_pagination_negative\n    users_validations.validate_invalid_pagination(page, per_page)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = '%$#@!', per_page = '%$#@!'\n\n    def validate_invalid_pagination(page, per_page):\n        if isinstance(page, int) or isinstance(per_page, int):\n            assert (page > 0 or per_page > 0), \"[intentionally failed]No error message returned for invalid page: \" + \\\n                                      str(page) + \" with type as \" + str(type(page))\n    \n>       assert isinstance(page, int), \"[intentionally failed]No error message returned for invalid page: \" + \\\n                                      str(page) + \" with type as \" + str(type(page))\nE       AssertionError: [intentionally failed]No error message returned for invalid page: %$#@! with type as <class 'str'>\n\n..\\utilities\\validations\\users_validations.py:61: AssertionError"}, "attachments": [{"name": "log", "source": "3be2b268-ad14-4646-b30b-9baf75d7f307-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "invalid_data", "value": "'%$#@!'"}], "start": 1700273986445, "stop": 1700273988546, "uuid": "7942cd29-155b-4cb3-a52d-e982f597ba14", "historyId": "7fe9a87ef93f3061706c2b532c082c1f", "testCaseId": "6802bbff743ee4b10f5fc2106995f751", "fullName": "tests.test_posts.TestPosts#test_pagination_negative", "labels": [{"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "tag", "value": "negative"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_posts"}, {"name": "subSuite", "value": "TestPosts"}, {"name": "host", "value": "DESKTOP-FFIUPF0"}, {"name": "thread", "value": "14704-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_posts"}]}